use crate::ast::*;
use crate::lexer::*;

grammar<'input>(ast: &mut ASTArena, file: FileRef);

extern {
    type Location = usize;
    type Error = LexerError;

    enum Wrap<'input> {
        "<" => Wrap::R(Token::LAngle),
        ">" => Wrap::R(Token::RAngle),
        "(" => Wrap::R(Token::LPar),
        ")" => Wrap::R(Token::RPar),
        "{" => Wrap::R(Token::LCurl),
        "}" => Wrap::R(Token::RCurl),
        "[" => Wrap::R(Token::LBrac),
        "]" => Wrap::R(Token::RBrac),
        "|" => Wrap::R(Token::Pipe),
        ":" => Wrap::R(Token::Colon),
        "," => Wrap::R(Token::Comma),
        ";" => Wrap::R(Token::Semi),
        "." => Wrap::R(Token::Dot),
        "_" => Wrap::R(Token::Underscore),
        ".." => Wrap::R(Token::DotDot),
        "=>" => Wrap::R(Token::Arrow),
        ":=" => Wrap::R(Token::Assn),
        "::=" => Wrap::R(Token::LitAssn),
        "puts" => Wrap::R(Token::Puts),
        "case" => Wrap::R(Token::Case),
        "let" => Wrap::R(Token::Let),
        "in" => Wrap::R(Token::In),
        "fix" => Wrap::R(Token::Fix),
        "fn" => Wrap::R(Token::Fn),
        "with" => Wrap::R(Token::With),
        "var" => Wrap::R(Token::Var(<&'input str>)),
        "atom" => Wrap::R(Token::Atom(<&'input str>)),
        "num" => Wrap::R(Token::Num(<i64>)),
        "str" => Wrap::R(Token::Str(<String>)),
        "`[" => Wrap::R(Token::FStringStart),

        "fragment" => Wrap::F(FStringToken::Text(<String>)),
        "fvar" => Wrap::F(FStringToken::Var(<&'input str>)),
        "`]" => Wrap::F(FStringToken::FStringEnd),
    }
}

pub Stmts: Vec<Stmt> = {
    <mut stmts:(<Stmt> ";")*> <stmt:Stmt?> => match stmt {
        None => stmts,
        Some(stmt) => {
            stmts.push(stmt);
            stmts
        }
    },
};

pub Stmt: Stmt = {
    "puts" <Located<Expr>> => Stmt::Puts(<>),
    "fn" <name:Name> "{" <cs:Located<FunCases>> "}" =>
      Stmt::Assn(Binding {
        fixed: true,
        name,
        expr: Located {
          item: ast.add_expr(Expr::Fun(cs.item)),
          loc: cs.loc,
        },
      }),
    "fn" <name:Name> <case:Located<FunCase>> =>
      Stmt::Assn(Binding {
        fixed: true,
        name,
        expr: Located {
          item: ast.add_expr(Expr::Fun(vec![case.item])),
          loc: case.loc,
        },
      }),
    <binding:Binding> => Stmt::Assn(binding),
    "fix" <Name> => Stmt::Fix(<>),
};

pub AtomLit: string_interner::DefaultSymbol = {
    "var" => ast.add_string(<>),
    "atom" => ast.add_string(<>),
};

pub BareString: String = {
    "var" => <>.to_string(),
    "atom" => <>.to_string(),
};

pub Name: Name = {
    <start: @L> <str:"var"> <end: @R> =>
        Located::new(ast.add_string(str), file, Span { start: start as u32, end: end as u32 }),
};

pub ExprRef = Located<Expr>;

pub Expr: ExprId = {
    <mut ts:(<Choice> "|")*> <t:Choice> => {
        if ts.len() == 0 {
            t.value.item
        } else {
            ts.push(t);
            ast.add_expr(Expr::Chc(ts))
        }
    }
};

pub Choice: Choice = {
    <weight:"num"> ":" <value:Located<Term>> => Choice {
        weight: Some(weight),
        value
    },
    <value:Located<Term>> => Choice {
        weight: None,
        value
    }
};

pub Term: ExprId = {
    <mut bs:(<Located<Branch>>)*> => {
        match bs.len() {
            0 => ast.expr_nil(),
            1 => bs.pop().unwrap().item,
            _ => ast.add_expr(Expr::Cat(<>)),
        }
    }
};

pub Branch: ExprId = {
    <l:Located<Branch>> "." <r:Name> => ast.add_expr(Expr::Access(l, r)),
    <l:Located<Branch>> "[" <mut rs:Located<(<Expr> ",")>*> <r:Located<Expr>> "]" => {
        rs.push(r);
        ast.add_expr(Expr::Ap(l, rs))
    },
    <Subbranch> => <>,
};

pub Subbranch: ExprId = {
    <l:Located<Subbranch>> ".." <r:Located<Leaf>> => ast.add_expr(Expr::Range(l, r)),
    <Leaf> => <>,
}

pub Leaf: ExprId = {
    <Literal> => ast.add_expr(Expr::Lit(<>)),
    <Name> => ast.add_expr(Expr::Var(<>)),
    <l:Located<Leaf>> "with" "{" <fields:(Field ",")*> <f:Field> ","? "}" => {
      let mut fields = fields.into_iter().map(|(f, _)| f).collect::<Vec<Field>>();
      fields.push(f);
      ast.add_expr(Expr::With(l, fields))
    },
    "<" <mut es:(<Located<Expr>> ",")*> <e:Located<Expr>> ">" => {
        if es.len() == 0 && e.item.nil() {
            ast.add_expr(Expr::Tup(Vec::new(), None))
        } else {
            es.push(e);
            ast.add_expr(Expr::Tup(es, None))
        }
    },
    "<" <es:(<Located<Expr>> ",")*> ".." <rest:Located<Expr>> ">" => {
        if es.len() == 0  {
            ast.add_expr(Expr::Tup(Vec::new(), Some(rest)))
        } else {
            ast.add_expr(Expr::Tup(es, Some(rest)))
        }
    },
    "{" <fields:(Field ",")*> <f:Field> ","? "}" => {
        let mut fields = fields.into_iter().map(|(f, _)| f).collect::<Vec<Field>>();
        fields.push(f);
        ast.add_expr(Expr::Record(fields))
    },
    "let" <bindings:Bindings> "in" "{" <expr:Located<Expr>> "}" =>
        ast.add_expr(Expr::Let(bindings, expr)),
    "fn" "{" <cs:FunCases> "}" =>
        ast.add_expr(Expr::Fun(cs)),
    "case" <e:Located<Expr>> "in" "{" <cs:Cases> "}" =>
        ast.add_expr(Expr::Case(e, cs)),
    "(" <e:Expr> ")" => e,
    "`[" <fs:(<Located<FStringFragment>>)*> "`]" =>
      ast.add_expr(Expr::Cat(fs)),
};

pub FStringFragment: ExprId = {
  "fragment" => ast.add_expr(Expr::Lit(Literal::Str(<>))),
  <loc:Located<"fvar">> => {
    let var = loc.map(|str| ast.add_string(str));
    ast.add_expr(Expr::Var(var))
  },
};

pub Field: Field = {
    <n:Name> ":" <e:Located<Expr>> => Field {
        name: n,
        expr: e,
    },
};

pub Bindings: Vec<Binding> = {
  <mut bs:(<Binding> ";")*> <b:Binding> => {
    bs.push(b);
    bs
  },
};

pub Binding: Binding = {
  <fixed:"fix"?> <name:Name> ":=" <expr:Located<Expr>> =>
    Binding {
        fixed: fixed.is_some(),
        name,
        expr,
    },
  <fixed:"fix"?> <name:Name> "::=" <expr:Located<SimpleDisjunction>> =>
    Binding {
        fixed: fixed.is_some(),
        name,
        expr,
    },
};

pub SimpleDisjunction: ExprId = {
  <strs:(<Located<BareString>>)*> => {
    let choices = strs.into_iter().map(|l| {
      Choice {
        weight: None,
        value: Located::new(
          ast.add_expr(Expr::Lit(Literal::Str(l.item))),
          file,
          l.loc.span,
        ),
      }
    }).collect();
    ast.add_expr(Expr::Chc(choices))
  }
};

pub Cases: Vec<Case> = {
  <mut cs:(<Case> ";")*> <c:Case> => {
    cs.push(c);
    cs
  }
};

pub Case: Case = {
  <pat:Pat> "=>" <expr:Located<Expr>> =>
    Case { pats: vec![pat], expr }
};

pub FunCases: Vec<Case> = {
    <mut cs:(<FunCase> ";")*> <c:FunCase> ";"? => {
        cs.push(c);
        cs
    }
};

pub FunCase: Case = {
    "[" <mut pats:(<Pat> ",")*> <pat:Pat> "]" "=>" <expr:Located<Expr>> => {
        pats.push(pat);
        Case { pats, expr }
    }
};

pub Pat: Pat = {
    "_" => Pat::Wildcard,
    <Literal> => Pat::Lit(<>),
    <Name> => Pat::Var(<>),

    "(" <mut ps:(<Pat> "|")*> <p:Pat> ")" => {
      ps.push(p);
      Pat::Any(ps)
    },

    "<" ">" => Pat::Tup(Vec::new(), RowPat::NoRest),
    "<" <mut ps:(<Pat> ",")*> <p:Pat> ","? ">" => {
        ps.push(p);
        Pat::Tup(ps, RowPat::NoRest)
    },
    "<" <ps:(<Pat> ",")*> ".." ","? ">" => {
        Pat::Tup(ps, RowPat::UnboundRest)
    },
    "<" <ps:(<Pat> ",")*> ".." <rest:Name> ","? ">" => {
        Pat::Tup(ps, RowPat::BoundRest(rest))
    },

    "{" <mut fs:(<FieldPat> ",")*> <f:FieldPat> ","? "}" => {
        fs.push(f);
        Pat::Rec(fs, RowPat::NoRest)
    },
    "{" <fs:(<FieldPat> ",")*> ".." ","? "}" => {
        Pat::Rec(fs, RowPat::UnboundRest)
    },
    "{" <fs:(<FieldPat> ",")*> ".." <rest:Name> ","? "}" => {
        Pat::Rec(fs, RowPat::BoundRest(rest))
    },
};

pub FieldPat: FieldPat = {
    <name:Name> ":" <pat:Pat> => FieldPat {
      name, pat
    },
    <name:Name> ":" => FieldPat {
      name, pat: Pat::Var(name)
    }
};

pub Literal: Literal = {
    "num" => Literal::Num(<>),
    "str" => Literal::Str(<>),
    <atom:Located<"atom">> => Literal::Atom(atom.map(|x| ast.add_string(x))),
};

#[inline]
Located<T>: Located<T> = {
    <start: @L> <data: T> <end: @R> =>
        Located::new(data, file, Span { start: start as u32, end: end as u32 }),
};
